package template

var DefaultTpl = "package model\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/tal-tech/go-zero/core/stores/cache\"\n\t\"github.com/tal-tech/go-zero/core/stores/sqlc\"\n\t\"github.com/tal-tech/go-zero/core/stores/sqlx\"\n\t\"github.com/tal-tech/go-zero/core/stringx\"\n\t\"github.com/tal-tech/go-zero/tools/goctl/model/sql/builderx\"\n)\n\n{{$unTitleTable := .Table.Lower}}\n{{$titleTable := .Table.Title}}\n\n\nvar (\n\t{{$unTitleTable}}FieldNames          = builderx.RawFieldNames(&{{$titleTable}}{})\n\t{{$unTitleTable}}Rows                = strings.Join({{$unTitleTable}}FieldNames, \",\")\n\t{{$unTitleTable}}RowsExpectAutoSet   = strings.Join(stringx.Remove({{$unTitleTable}}FieldNames, \"`id`\", \"`create_time`\", \"`update_time`\"), \",\")\n\t{{$unTitleTable}}RowsWithPlaceHolder = strings.Join(stringx.Remove({{$unTitleTable}}FieldNames, \"`id`\", \"`create_time`\", \"`update_time`\"), \"=?,\") + \"=?\"\n\n\tcache{{$titleTable}}IdPrefix        = \"cache#{{$unTitleTable}}#id#\"\n)\n\ntype (\n\t{{$titleTable}}Model interface {\n\t\tInsert(data {{$titleTable}}) (sql.Result, error)\n\t\tFindOne(id int64) (*{{$titleTable}}, error)\n\t\tUpdate(data {{$titleTable}}) error\n\t\tDelete(id int64) error\n\t}\n\n\tdefault{{$titleTable}}Model struct {\n\t\tsqlc.CachedConn\n\t\ttable string\n\t}\n\n\t{{$titleTable}} struct {\n\t\t{{range .Columns}}{{.ColumnName.ToCamel}} {{.DataType.Golang}} `db:\"{{.ColumnName.Source}}\"`\n\t\t{{end}}\n\t}\n)\n\nfunc New{{$titleTable}}Model(conn sqlx.SqlConn, c cache.CacheConf) {{$titleTable}}Model {\n\treturn &default{{$titleTable}}Model{\n\t\tCachedConn: sqlc.NewConn(conn, c),\n\t\ttable:      \"`{{.Table.Source}}`\",\n\t}\n}\n\nfunc (m *default{{$titleTable}}Model) Insert(data {{$titleTable}}) (sql.Result, error) {\n\tret, err := m.Exec(func(conn sqlx.SqlConn) (result sql.Result, err error) {\n\t\tquery := fmt.Sprintf(\"insert into %s (%s) values (?, ?, ?, ?)\", m.table, {{$unTitleTable}}RowsExpectAutoSet)\n\t\treturn conn.Exec(query,{{range .Columns}}{{if and (ne .ColumnName.Source \"id\") (ne .ColumnName.Source \"create_time\") (ne .ColumnName.Source \"update_time\")}}data.{{.ColumnName.ToCamel}},{{end}}{{end}})\n\t})\n\treturn ret, err\n}\n\n\nfunc (m *default{{$titleTable}}Model) FindOne(id int64) (*{{$titleTable}}, error) {\n{{$unTitleTable}}IdKey := fmt.Sprintf(\"%s%v\", cache{{$titleTable}}IdPrefix, id)\n\tvar resp {{$titleTable}}\n\terr := m.QueryRow(&resp, {{$unTitleTable}}IdKey, func(conn sqlx.SqlConn, v interface{}) error {\n\t\tquery := fmt.Sprintf(\"select %s from %s where `id` = ? limit 1\", {{$unTitleTable}}Rows, m.table)\n\t\treturn conn.QueryRow(v, query, id)\n\t})\n\tswitch err {\n\tcase nil:\n\t\treturn &resp, nil\n\tcase sqlc.ErrNotFound:\n\t\treturn nil, ErrNotFound\n\tdefault:\n\t\treturn nil, err\n\t}\n}\n\nfunc (m *default{{$titleTable}}Model) Update(data {{$titleTable}}) error {\n\t{{$unTitleTable}}IdKey := fmt.Sprintf(\"%s%v\", cache{{$titleTable}}IdPrefix, data.Id)\n\t_, err := m.Exec(func(conn sqlx.SqlConn) (result sql.Result, err error) {\n\t\tquery := fmt.Sprintf(\"update %s set %s where `id` = ?\", m.table, {{$unTitleTable}}RowsWithPlaceHolder)\n\t\treturn conn.Exec(query,{{range .Columns}}{{if and  (ne .ColumnName.Source \"id\") (ne .ColumnName.Source \"create_time\") (ne .ColumnName.Source \"update_time\")}}data.{{.ColumnName.ToCamel}},{{end}}{{end}} data.Id)\n\t}, {{$unTitleTable}}IdKey)\n\treturn err\n}\n\nfunc (m *default{{$titleTable}}Model) Delete(id int64) error {\n\t{{$unTitleTable}}IdKey := fmt.Sprintf(\"%s%v\", cache{{$titleTable}}IdPrefix, id)\n\t_, err := m.Exec(func(conn sqlx.SqlConn) (result sql.Result, err error) {\n\t\tquery := fmt.Sprintf(\"delete from %s where `id` = ?\", m.table)\n\t\treturn conn.Exec(query, id)\n\t}, {{$unTitleTable}}IdKey)\n\treturn err\n}\n\nfunc (m *default{{$titleTable}}Model) formatPrimary(primary interface{}) string {\n\treturn fmt.Sprintf(\"%s%v\", cache{{$titleTable}}IdPrefix, primary)\n}\n\nfunc (m *default{{$titleTable}}Model) queryPrimary(conn sqlx.SqlConn, v, primary interface{}) error {\n\tquery := fmt.Sprintf(\"select %s from %s where `id` = ? limit 1\", {{$unTitleTable}}Rows, m.table)\n\treturn conn.QueryRow(v, query, primary)\n}\n"

var ErrorTpl = `package model

import "github.com/tal-tech/go-zero/core/stores/sqlx"

var ErrNotFound = sqlx.ErrNotFound`
